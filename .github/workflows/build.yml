name: "Build"

on:
  workflow_call:
    secrets:
#      APPLE_ID:
#        required: true
#      APPLE_PASSWORD:
#        required: true
#      APPLE_TEAM_ID:
#        required: true
#      APPLE_CERTIFICATE:
#        required: true
#      APPLE_CERTIFICATE_PASSWORD:
#        required: true
#      KEYCHAIN_PASSWORD:
#        required: true
#      GPG_PRIVATE_KEY:
#        required: true
#      GPG_PASSPHRASE:
#        required: true
      ANDROID_KEY_ALIAS:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true
      ANDROID_KEY_BASE64:
        required: true
  pull_request:
  push:

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Single Android build that will output all ABIs
          - name: "Android"
            platform: "ubuntu-22.04"
            android: true

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.15.0



      - name: Add Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # Specify the working directory for Rust cache
          workspaces: "src-tauri -> target"
          # Cache cargo registry
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
          # Add a suffix to distinguish between different platforms and architectures
          key: ${{ matrix.platform }}${{ matrix.arch && '-' }}${{ matrix.arch }}${{ matrix.android && '-android' }}

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >-
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.android && 'aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android' || '' }}

      - name: Install frontend dependencies
        run: pnpm install

      - name: Cache Android NDK
        if: matrix.android
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk/ndk/25.2.9519653
          key: ${{ runner.os }}-ndk-25.2.9519653

      - name: Set up JDK 17
        if: matrix.android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.android
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        if: matrix.android
        run: |
          sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Setup Android signing
        if: matrix.android
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Build Android universal binary
        if: matrix.android
        run: |
          pnpm tauri android build

      - name: Build Android arch specific binaries
        if: matrix.android
        run: |
          pnpm tauri android build --apk --split-per-abi

      - name: List Android build outputs
        if: matrix.android
        run: |
          echo "Listing all APKs recursively:"
          find src-tauri/gen/android -name "*.apk" -type f
          echo "\nListing all AABs recursively:"
          find src-tauri/gen/android -name "*.aab" -type f
          echo "\nListing specific release directories:"
          ls -la src-tauri/gen/android/app/build/outputs/apk/*/release/ || echo "Release dirs not found"

      - name: Prepare Android artifacts
        if: matrix.android
        run: |
          # Get version from Cargo.toml
          VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
          echo "Version: $VERSION"
          mkdir -p android-artifacts

          echo "Checking source paths:"
          for type in universal arm64 arm x86 x86_64; do
            echo "Checking ${type}:"
            ls -la "src-tauri/gen/android/app/build/outputs/apk/${type}/release/" || echo "${type} directory not found"
          done

          # Copy files with error checking
          for pair in \
            "universal/release/app-universal-release.apk:android-universal.apk" \
            "arm64/release/app-arm64-release.apk:android-arm64.apk" \
            "arm/release/app-arm-release.apk:android-arm.apk" \
            "x86/release/app-x86-release.apk:android-x86.apk" \
            "x86_64/release/app-x86_64-release.apk:android-x86_64.apk"; do
            src=${pair%:*}
            dst=${pair#*:}
            if [ -f "src-tauri/gen/android/app/build/outputs/apk/$src" ]; then
              cp "src-tauri/gen/android/app/build/outputs/apk/$src" "android-artifacts/tollgate-${VERSION}-${dst}"
              echo "Copied $src successfully"
            else
              echo "Source file not found: $src"
            fi
          done

      - name: Generate Android artifact hashes
        if: matrix.android
        run: |
          cd android-artifacts
          find . -type f -not -name "*.sha256" -exec sh -c '
            sha256sum "$1" | sed "s|./|  |" > "${1}.sha256"
          ' sh {} \;

      - name: List Android artifacts
        if: matrix.android
        run: |
          find android-artifacts/* -type f

      - name: Upload Android artifacts
        if: matrix.android
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: android-artifacts/*